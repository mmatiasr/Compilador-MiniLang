
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN BOOL CONST DO END ID INT LPAREN MAIN NUMBER PRINT RPAREN SEMICOLON STRING STRING_LITERAL SUBROUTINE VOIDprogram : consts vars subroutines mainconsts : consts CONST const_list\n              | CONST const_listconst_list : const_list const_decl\n                  | const_declconst_decl : INT ID ASSIGN NUMBER SEMICOLON\n                  | STRING ID ASSIGN STRING_LITERAL SEMICOLONvars : emptysubroutines : emptymain : SUBROUTINE VOID MAIN LPAREN RPAREN DO stmt_list ENDstmt_list : stmt_list stmt\n                 | stmtstmt : PRINT LPAREN expr RPAREN SEMICOLONexpr : STRING_LITERAL\n            | IDempty :'
    
_lr_action_items = {'CONST':([0,2,7,8,13,14,25,26,],[3,5,-3,-5,-2,-4,-6,-7,]),'$end':([1,17,33,],[0,-1,-10,]),'SUBROUTINE':([2,4,6,7,8,11,12,13,14,25,26,],[-16,-16,-8,-3,-5,18,-9,-2,-4,-6,-7,]),'INT':([3,5,7,8,13,14,25,26,],[9,9,9,-5,9,-4,-6,-7,]),'STRING':([3,5,7,8,13,14,25,26,],[10,10,10,-5,10,-4,-6,-7,]),'ID':([9,10,35,],[15,16,38,]),'ASSIGN':([15,16,],[19,20,]),'VOID':([18,],[21,]),'NUMBER':([19,],[22,]),'STRING_LITERAL':([20,35,],[23,37,]),'MAIN':([21,],[24,]),'SEMICOLON':([22,23,39,],[25,26,40,]),'LPAREN':([24,32,],[27,35,]),'RPAREN':([27,36,37,38,],[28,39,-14,-15,]),'DO':([28,],[29,]),'PRINT':([29,30,31,34,40,],[32,32,-12,-11,-13,]),'END':([30,31,34,40,],[33,-12,-11,-13,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'consts':([0,],[2,]),'vars':([2,],[4,]),'empty':([2,4,],[6,12,]),'const_list':([3,5,],[7,13,]),'const_decl':([3,5,7,13,],[8,8,14,14,]),'subroutines':([4,],[11,]),'main':([11,],[17,]),'stmt_list':([29,],[30,]),'stmt':([29,30,],[31,34,]),'expr':([35,],[36,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> consts vars subroutines main','program',4,'p_program','parser_minilang.py',14),
  ('consts -> consts CONST const_list','consts',3,'p_consts','parser_minilang.py',20),
  ('consts -> CONST const_list','consts',2,'p_consts','parser_minilang.py',21),
  ('const_list -> const_list const_decl','const_list',2,'p_const_list','parser_minilang.py',30),
  ('const_list -> const_decl','const_list',1,'p_const_list','parser_minilang.py',31),
  ('const_decl -> INT ID ASSIGN NUMBER SEMICOLON','const_decl',5,'p_const_decl','parser_minilang.py',40),
  ('const_decl -> STRING ID ASSIGN STRING_LITERAL SEMICOLON','const_decl',5,'p_const_decl','parser_minilang.py',41),
  ('vars -> empty','vars',1,'p_vars','parser_minilang.py',50),
  ('subroutines -> empty','subroutines',1,'p_subroutines','parser_minilang.py',55),
  ('main -> SUBROUTINE VOID MAIN LPAREN RPAREN DO stmt_list END','main',8,'p_main','parser_minilang.py',60),
  ('stmt_list -> stmt_list stmt','stmt_list',2,'p_stmt_list','parser_minilang.py',65),
  ('stmt_list -> stmt','stmt_list',1,'p_stmt_list','parser_minilang.py',66),
  ('stmt -> PRINT LPAREN expr RPAREN SEMICOLON','stmt',5,'p_stmt','parser_minilang.py',73),
  ('expr -> STRING_LITERAL','expr',1,'p_expr','parser_minilang.py',78),
  ('expr -> ID','expr',1,'p_expr','parser_minilang.py',79),
  ('empty -> <empty>','empty',0,'p_empty','parser_minilang.py',83),
]
